//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = thrift.Int64;

//var ttypes = module.exports = {};

var blob = function(args) {
    if(args && args.data){
        this.data = args.data;
    }
};
blob.prototype = {};

blob.prototype.read = function(input){
    this.data = input.readBinary();
};

blob.prototype.write = function(output){
    output.writeBinary(this.data);
};

//Error code enum
var error_type = {
    ERR_OK : 0,
    ERR_UNKNOWN : 1,
    ERR_REPLICATION_FAILURE : 2,
    ERR_APP_EXIST : 3,
    ERR_APP_NOT_EXIST : 4,
    ERR_APP_DROPPED : 5,
    ERR_BUSY_CREATING : 6,
    ERR_BUSY_DROPPING : 7,
    ERR_EXPIRED : 8,
    ERR_LOCK_ALREADY_EXIST : 9,
    ERR_HOLD_BY_OTHERS : 10,
    ERR_RECURSIVE_LOCK : 11,
    ERR_NO_OWNER : 12,
    ERR_NODE_ALREADY_EXIST : 13,
    ERR_INCONSISTENT_STATE :14,
    ERR_ARRAY_INDEX_OUT_OF_RANGE : 15,
    ERR_SERVICE_NOT_FOUND : 16,
    ERR_SERVICE_ALREADY_RUNNING : 17,
    ERR_IO_PENDING : 18,
    ERR_TIMEOUT : 19,
    ERR_SERVICE_NOT_ACTIVE : 20,
    ERR_BUSY : 21,
    ERR_NETWORK_INIT_FAILED : 22,
    ERR_FORWARD_TO_OTHERS : 23,
    ERR_OBJECT_NOT_FOUND : 24,
    ERR_HANDLER_NOT_FOUND : 25,
    ERR_LEARN_FILE_FAILED : 26,
    ERR_GET_LEARN_STATE_FAILED : 27,
    ERR_INVALID_VERSION : 28,
    ERR_INVALID_PARAMETERS : 29,
    ERR_CAPACITY_EXCEEDED : 30,
    ERR_INVALID_STATE : 31,
    ERR_INACTIVE_STATE : 32,
    ERR_NOT_ENOUGH_MEMBER : 33,
    ERR_FILE_OPERATION_FAILED : 34,
    ERR_HANDLE_EOF : 35,
    ERR_WRONG_CHECKSUM : 36,
    ERR_INVALID_DATA : 37,
    ERR_INVALID_HANDLE : 38,
    ERR_INCOMPLETE_DATA : 39,
    ERR_VERSION_OUTDATED : 40,
    ERR_PATH_NOT_FOUND : 41,
    ERR_PATH_ALREADY_EXIST : 42,
    ERR_ADDRESS_ALREADY_USED : 43,
    ERR_STATE_FREEZED : 44,
    ERR_LOCAL_APP_FAILURE : 45,
    ERR_BIND_IOCP_FAILED : 46,
    ERR_NETWORK_START_FAILED : 47,
    ERR_NOT_IMPLEMENTED : 48,
    ERR_CHECKPOINT_FAILED : 49,
    ERR_WRONG_TIMING : 50,
    ERR_NO_NEED_OPERATE : 51,
    ERR_CORRUPTION : 52,
    ERR_TRY_AGAIN : 53,
    ERR_CLUSTER_NOT_FOUND : 54,
    ERR_CLUSTER_ALREADY_EXIST : 55,
    ERR_ZOOKEEPER_OPERATION : 56,
    ERR_K8S_CLUSTER_NOT_FOUND : 57,
    ERR_K8S_KUBECTL_NOT_FOUND : 58,
    ERR_K8S_DEPLOY_FAILED : 59,
    ERR_K8S_UNDEPLOY_FAILED : 60,
    ERR_RESOURCE_NOT_ENOUGH : 61,
    ERR_WIN_DEPLOY_FAILED : 62,
    ERR_WIN_UNDEPLOY_FAILED : 63,
    ERR_DOCKER_DAEMON_NOT_FOUND : 64,
    ERR_DOCKER_BINARY_NOT_FOUND : 65,
    ERR_DOCKER_DEPLOY_FAILED : 66,
    ERR_DOCKER_UNDEPLOY_FAILED : 67,
    ERR_FS_INTERNAL : 68,

    //ERROR_CODE defined by client
    ERR_NO_PRIMARY : 69,
    ERR_NO_REPLICA : 70,
    ERR_NO_META_SERVER : 71,
    ERR_READ_TABLE_FAILED : 72,
    ERR_SESSION_RESET : 73,
    ERR_META_RESET : 74
};

//Default err is ERR_UNKNOWN
var error_code = function(args) {
    this.errno = error_type.ERR_UNKNOWN;
    if(args){
        if(args.errno !== undefined && args.errno !== null){
            this.errno = args.errno;
        }
    }
};
error_code.prototype = {};

error_code.prototype.read = function(protocol){
    this.errno = protocol.readString();
};
error_code.prototype.write = function(protocol){
    protocol.writeString();
};

var task_code = function(args) {
};
task_code.prototype = {};
task_code.prototype.read = function(input) {
    input.readStructBegin();
    while (true)
    {
        var ret = input.readFieldBegin();
        var fname = ret.fname;
        var ftype = ret.ftype;
        var fid = ret.fid;
        if (ftype == Thrift.Type.STOP) {
            break;
        }
        input.skip(ftype);
        input.readFieldEnd();
    }
    input.readStructEnd();
    return;
};

task_code.prototype.write = function(output) {
    output.writeStructBegin('task_code');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
};

var rpc_address = function(args) {
    this.address = 0;
    this.host = null;
    this.port = 0;
    if(args && args.address){
        this.address = args.address;
    }
    if(args && args.host){
        this.host = args.host;
    }
    if(args && args.port){
        this.port = args.port;
    }
};

rpc_address.prototype = {};
rpc_address.prototype.read = function(input){
    let buffer = input.readI64();
    let buf = buffer.buffer;
    let off = buffer.offset;

    let ipNum = (parseInt(buf[0+off]) << 24
        | parseInt(buf[1+off]) << 16
        | parseInt(buf[2+off]) << 8
        | parseInt(buf[3+off])) >>> 0;
    this.host = buf[0+off]+'.'+buf[1+off]+'.'+buf[2+off]+'.'+buf[3+off];
    this.port = parseInt(buf[4+off]) << 8 | parseInt(buf[5+off]) >>> 0;
    this.address = (ipNum << 32) + (parseInt(this.port) << 16) + 1;
};

rpc_address.prototype.write = function(output){
    output.writeI64(new Int64(this.address));
};

//Parse xx.xx.xx.xx:xx ip_address:port format to integer
//Calculate address by ip number and port
rpc_address.prototype.fromString = function(ip_port){
    if(ip_port != undefined && ip_port != null){
        let str = ip_port.split(':');
        if(str.length != 2){
            return false;
        }

        let ip = str[0];
        let port = str[1];
        this.host = ip;
        this.port = port;

        str = ip.split('.');
        if(str.length != 4){
            return false;
        }

        let ipNum = (parseInt(ip[0]) << 24
            | parseInt(ip[1]) << 16
            | parseInt(ip[2]) << 8
            | parseInt(ip[3])) >>> 0;

        this.address = (ipNum << 32) + (parseInt(port) << 16) + 1;

        return true;
    }
};

rpc_address.prototype.invalid = function(){
    return (this.address === 0);
};

rpc_address.prototype.equals = function(other){
    if(other === undefined || other === null){
        return false;
    }
    if(other instanceof rpc_address){
        if(other.address !== this.address){
            return false;
        }else if(other.host !== this.host){
            return false;
        }else if(other.port !== this.port){
            return false;
        }else{
            return true;
        }
    }
    return false;
};

//value, calculate by app_id and partition index
var gpid = function(args) {
    this.value = 0;
    this.app_id = 0;
    this.pidx = 0;
    if(args && args.app_id && args.pidx != undefined){
        this.app_id = args.app_id;
        this.pidx = args.pidx;
        this.value = ((args.pidx) << 32) + args.app_id;
    }
};
gpid.prototype = {};

gpid.prototype.read = function(input){
    let buffer = input.readI64();
    let buf = buffer.buffer;
    this.pidx = buf.readInt32BE(0);
    this.app_id = buf.readInt32BE(4);
    this.value = this.pidx << 32 + this.app_id;
    //console.log('value is %d, app id is %d, pidx is %d', this.value, app_id, pidx);
};

gpid.prototype.write = function(output){
    output.writeI64(this.value);
};

//Get app_id
gpid.prototype.get_app_id = function(){
    return this.app_id;
};

//Get partition index
gpid.prototype.get_pidx = function(){
    return this.pidx;
};

module.exports = {
    blob : blob,
    error_type : error_type,
    error_code : error_code,
    task_code : task_code,
    rpc_address : rpc_address,
    gpid : gpid,
};

