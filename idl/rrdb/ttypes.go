// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rrdb

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
	"github.com/pegasus-kv/pegasus-go-client/idl/base"
	"github.com/pegasus-kv/pegasus-go-client/idl/replication"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var _ = replication.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - Key
//  - Value
//  - ExpireTsSeconds
type UpdateRequest struct {
	Key             *base.Blob `thrift:"key,1" json:"key"`
	Value           *base.Blob `thrift:"value,2" json:"value"`
	ExpireTsSeconds int32      `thrift:"expire_ts_seconds,3" json:"expire_ts_seconds"`
}

func NewUpdateRequest() *UpdateRequest {
	return &UpdateRequest{}
}

var UpdateRequest_Key_DEFAULT *base.Blob

func (p *UpdateRequest) GetKey() *base.Blob {
	if !p.IsSetKey() {
		return UpdateRequest_Key_DEFAULT
	}
	return p.Key
}

var UpdateRequest_Value_DEFAULT *base.Blob

func (p *UpdateRequest) GetValue() *base.Blob {
	if !p.IsSetValue() {
		return UpdateRequest_Value_DEFAULT
	}
	return p.Value
}

func (p *UpdateRequest) GetExpireTsSeconds() int32 {
	return p.ExpireTsSeconds
}
func (p *UpdateRequest) IsSetKey() bool {
	return p.Key != nil
}

func (p *UpdateRequest) IsSetValue() bool {
	return p.Value != nil
}

func (p *UpdateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateRequest) readField1(iprot thrift.TProtocol) error {
	p.Key = &base.Blob{}
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *UpdateRequest) readField2(iprot thrift.TProtocol) error {
	p.Value = &base.Blob{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *UpdateRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpireTsSeconds = v
	}
	return nil
}

func (p *UpdateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *UpdateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *UpdateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expire_ts_seconds", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpireTsSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err)
	}
	return err
}

func (p *UpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRequest(%+v)", *p)
}

// Attributes:
//  - Error
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type UpdateResponse struct {
	Error          int32  `thrift:"error,1" json:"error"`
	AppID          int32  `thrift:"app_id,2" json:"app_id"`
	PartitionIndex int32  `thrift:"partition_index,3" json:"partition_index"`
	Decree         int64  `thrift:"decree,4" json:"decree"`
	Server         string `thrift:"server,5" json:"server"`
}

func NewUpdateResponse() *UpdateResponse {
	return &UpdateResponse{}
}

func (p *UpdateResponse) GetError() int32 {
	return p.Error
}

func (p *UpdateResponse) GetAppID() int32 {
	return p.AppID
}

func (p *UpdateResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *UpdateResponse) GetDecree() int64 {
	return p.Decree
}

func (p *UpdateResponse) GetServer() string {
	return p.Server
}
func (p *UpdateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *UpdateResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *UpdateResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *UpdateResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Decree = v
	}
	return nil
}

func (p *UpdateResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *UpdateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *UpdateResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:app_id: ", p), err)
	}
	return err
}

func (p *UpdateResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partition_index: ", p), err)
	}
	return err
}

func (p *UpdateResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("decree", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:decree: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Decree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.decree (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:decree: ", p), err)
	}
	return err
}

func (p *UpdateResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:server: ", p), err)
	}
	return err
}

func (p *UpdateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

// Attributes:
//  - Error
//  - Value
//  - AppID
//  - PartitionIndex
//  - Server
type ReadResponse struct {
	Error          int32      `thrift:"error,1" json:"error"`
	Value          *base.Blob `thrift:"value,2" json:"value"`
	AppID          int32      `thrift:"app_id,3" json:"app_id"`
	PartitionIndex int32      `thrift:"partition_index,4" json:"partition_index"`
	// unused field # 5
	Server string `thrift:"server,6" json:"server"`
}

func NewReadResponse() *ReadResponse {
	return &ReadResponse{}
}

func (p *ReadResponse) GetError() int32 {
	return p.Error
}

var ReadResponse_Value_DEFAULT *base.Blob

func (p *ReadResponse) GetValue() *base.Blob {
	if !p.IsSetValue() {
		return ReadResponse_Value_DEFAULT
	}
	return p.Value
}

func (p *ReadResponse) GetAppID() int32 {
	return p.AppID
}

func (p *ReadResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *ReadResponse) GetServer() string {
	return p.Server
}
func (p *ReadResponse) IsSetValue() bool {
	return p.Value != nil
}

func (p *ReadResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReadResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *ReadResponse) readField2(iprot thrift.TProtocol) error {
	p.Value = &base.Blob{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *ReadResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *ReadResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *ReadResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *ReadResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("read_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReadResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *ReadResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *ReadResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *ReadResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err)
	}
	return err
}

func (p *ReadResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *ReadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReadResponse(%+v)", *p)
}

// Attributes:
//  - Error
//  - TTLSeconds
//  - AppID
//  - PartitionIndex
//  - Server
type TTLResponse struct {
	Error          int32 `thrift:"error,1" json:"error"`
	TTLSeconds     int32 `thrift:"ttl_seconds,2" json:"ttl_seconds"`
	AppID          int32 `thrift:"app_id,3" json:"app_id"`
	PartitionIndex int32 `thrift:"partition_index,4" json:"partition_index"`
	// unused field # 5
	Server string `thrift:"server,6" json:"server"`
}

func NewTTLResponse() *TTLResponse {
	return &TTLResponse{}
}

func (p *TTLResponse) GetError() int32 {
	return p.Error
}

func (p *TTLResponse) GetTTLSeconds() int32 {
	return p.TTLSeconds
}

func (p *TTLResponse) GetAppID() int32 {
	return p.AppID
}

func (p *TTLResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *TTLResponse) GetServer() string {
	return p.Server
}
func (p *TTLResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TTLResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *TTLResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TTLSeconds = v
	}
	return nil
}

func (p *TTLResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *TTLResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *TTLResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *TTLResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ttl_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TTLResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TTLResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl_seconds", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl_seconds: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TTLSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl_seconds (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl_seconds: ", p), err)
	}
	return err
}

func (p *TTLResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *TTLResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err)
	}
	return err
}

func (p *TTLResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *TTLResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TTLResponse(%+v)", *p)
}

// Attributes:
//  - Error
//  - Count
//  - AppID
//  - PartitionIndex
//  - Server
type CountResponse struct {
	Error          int32 `thrift:"error,1" json:"error"`
	Count          int64 `thrift:"count,2" json:"count"`
	AppID          int32 `thrift:"app_id,3" json:"app_id"`
	PartitionIndex int32 `thrift:"partition_index,4" json:"partition_index"`
	// unused field # 5
	Server string `thrift:"server,6" json:"server"`
}

func NewCountResponse() *CountResponse {
	return &CountResponse{}
}

func (p *CountResponse) GetError() int32 {
	return p.Error
}

func (p *CountResponse) GetCount() int64 {
	return p.Count
}

func (p *CountResponse) GetAppID() int32 {
	return p.AppID
}

func (p *CountResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *CountResponse) GetServer() string {
	return p.Server
}
func (p *CountResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CountResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *CountResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *CountResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *CountResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *CountResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *CountResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("count_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *CountResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *CountResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *CountResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err)
	}
	return err
}

func (p *CountResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *CountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CountResponse(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type KeyValue struct {
	Key   *base.Blob `thrift:"key,1" json:"key"`
	Value *base.Blob `thrift:"value,2" json:"value"`
}

func NewKeyValue() *KeyValue {
	return &KeyValue{}
}

var KeyValue_Key_DEFAULT *base.Blob

func (p *KeyValue) GetKey() *base.Blob {
	if !p.IsSetKey() {
		return KeyValue_Key_DEFAULT
	}
	return p.Key
}

var KeyValue_Value_DEFAULT *base.Blob

func (p *KeyValue) GetValue() *base.Blob {
	if !p.IsSetValue() {
		return KeyValue_Value_DEFAULT
	}
	return p.Value
}
func (p *KeyValue) IsSetKey() bool {
	return p.Key != nil
}

func (p *KeyValue) IsSetValue() bool {
	return p.Value != nil
}

func (p *KeyValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeyValue) readField1(iprot thrift.TProtocol) error {
	p.Key = &base.Blob{}
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *KeyValue) readField2(iprot thrift.TProtocol) error {
	p.Value = &base.Blob{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *KeyValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("key_value"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *KeyValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := p.Value.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *KeyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyValue(%+v)", *p)
}

// Attributes:
//  - HashKey
//  - Kvs
//  - ExpireTsSeconds
type MultiPutRequest struct {
	HashKey         *base.Blob  `thrift:"hash_key,1" json:"hash_key"`
	Kvs             []*KeyValue `thrift:"kvs,2" json:"kvs"`
	ExpireTsSeconds int32       `thrift:"expire_ts_seconds,3" json:"expire_ts_seconds"`
}

func NewMultiPutRequest() *MultiPutRequest {
	return &MultiPutRequest{}
}

var MultiPutRequest_HashKey_DEFAULT *base.Blob

func (p *MultiPutRequest) GetHashKey() *base.Blob {
	if !p.IsSetHashKey() {
		return MultiPutRequest_HashKey_DEFAULT
	}
	return p.HashKey
}

func (p *MultiPutRequest) GetKvs() []*KeyValue {
	return p.Kvs
}

func (p *MultiPutRequest) GetExpireTsSeconds() int32 {
	return p.ExpireTsSeconds
}
func (p *MultiPutRequest) IsSetHashKey() bool {
	return p.HashKey != nil
}

func (p *MultiPutRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MultiPutRequest) readField1(iprot thrift.TProtocol) error {
	p.HashKey = &base.Blob{}
	if err := p.HashKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
	}
	return nil
}

func (p *MultiPutRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.Kvs = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &KeyValue{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Kvs = append(p.Kvs, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiPutRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExpireTsSeconds = v
	}
	return nil
}

func (p *MultiPutRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multi_put_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiPutRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hash_key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err)
	}
	if err := p.HashKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err)
	}
	return err
}

func (p *MultiPutRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kvs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Kvs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Kvs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err)
	}
	return err
}

func (p *MultiPutRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expire_ts_seconds", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expire_ts_seconds: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ExpireTsSeconds)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expire_ts_seconds (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expire_ts_seconds: ", p), err)
	}
	return err
}

func (p *MultiPutRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiPutRequest(%+v)", *p)
}

// Attributes:
//  - HashKey
//  - SorkKeys
//  - MaxCount
type MultiRemoveRequest struct {
	HashKey  *base.Blob   `thrift:"hash_key,1" json:"hash_key"`
	SorkKeys []*base.Blob `thrift:"sork_keys,2" json:"sork_keys"`
	MaxCount int64        `thrift:"max_count,3" json:"max_count"`
}

func NewMultiRemoveRequest() *MultiRemoveRequest {
	return &MultiRemoveRequest{}
}

var MultiRemoveRequest_HashKey_DEFAULT *base.Blob

func (p *MultiRemoveRequest) GetHashKey() *base.Blob {
	if !p.IsSetHashKey() {
		return MultiRemoveRequest_HashKey_DEFAULT
	}
	return p.HashKey
}

func (p *MultiRemoveRequest) GetSorkKeys() []*base.Blob {
	return p.SorkKeys
}

func (p *MultiRemoveRequest) GetMaxCount() int64 {
	return p.MaxCount
}
func (p *MultiRemoveRequest) IsSetHashKey() bool {
	return p.HashKey != nil
}

func (p *MultiRemoveRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MultiRemoveRequest) readField1(iprot thrift.TProtocol) error {
	p.HashKey = &base.Blob{}
	if err := p.HashKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
	}
	return nil
}

func (p *MultiRemoveRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*base.Blob, 0, size)
	p.SorkKeys = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &base.Blob{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.SorkKeys = append(p.SorkKeys, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiRemoveRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxCount = v
	}
	return nil
}

func (p *MultiRemoveRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multi_remove_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiRemoveRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hash_key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err)
	}
	if err := p.HashKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err)
	}
	return err
}

func (p *MultiRemoveRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sork_keys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sork_keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SorkKeys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SorkKeys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sork_keys: ", p), err)
	}
	return err
}

func (p *MultiRemoveRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_count", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_count: ", p), err)
	}
	return err
}

func (p *MultiRemoveRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiRemoveRequest(%+v)", *p)
}

// Attributes:
//  - Error
//  - Count
//  - AppID
//  - PartitionIndex
//  - Decree
//  - Server
type MultiRemoveResponse struct {
	Error          int32  `thrift:"error,1" json:"error"`
	Count          int64  `thrift:"count,2" json:"count"`
	AppID          int32  `thrift:"app_id,3" json:"app_id"`
	PartitionIndex int32  `thrift:"partition_index,4" json:"partition_index"`
	Decree         int64  `thrift:"decree,5" json:"decree"`
	Server         string `thrift:"server,6" json:"server"`
}

func NewMultiRemoveResponse() *MultiRemoveResponse {
	return &MultiRemoveResponse{}
}

func (p *MultiRemoveResponse) GetError() int32 {
	return p.Error
}

func (p *MultiRemoveResponse) GetCount() int64 {
	return p.Count
}

func (p *MultiRemoveResponse) GetAppID() int32 {
	return p.AppID
}

func (p *MultiRemoveResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *MultiRemoveResponse) GetDecree() int64 {
	return p.Decree
}

func (p *MultiRemoveResponse) GetServer() string {
	return p.Server
}
func (p *MultiRemoveResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MultiRemoveResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *MultiRemoveResponse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *MultiRemoveResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *MultiRemoveResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *MultiRemoveResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Decree = v
	}
	return nil
}

func (p *MultiRemoveResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *MultiRemoveResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multi_remove_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiRemoveResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("decree", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:decree: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Decree)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.decree (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:decree: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *MultiRemoveResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiRemoveResponse(%+v)", *p)
}

// Attributes:
//  - HashKey
//  - SorkKeys
//  - MaxKvCount
//  - MaxKvSize
//  - NoValue
type MultiGetRequest struct {
	HashKey    *base.Blob   `thrift:"hash_key,1" json:"hash_key"`
	SorkKeys   []*base.Blob `thrift:"sork_keys,2" json:"sork_keys"`
	MaxKvCount int32        `thrift:"max_kv_count,3" json:"max_kv_count"`
	MaxKvSize  int32        `thrift:"max_kv_size,4" json:"max_kv_size"`
	NoValue    bool         `thrift:"no_value,5" json:"no_value"`
}

func NewMultiGetRequest() *MultiGetRequest {
	return &MultiGetRequest{}
}

var MultiGetRequest_HashKey_DEFAULT *base.Blob

func (p *MultiGetRequest) GetHashKey() *base.Blob {
	if !p.IsSetHashKey() {
		return MultiGetRequest_HashKey_DEFAULT
	}
	return p.HashKey
}

func (p *MultiGetRequest) GetSorkKeys() []*base.Blob {
	return p.SorkKeys
}

func (p *MultiGetRequest) GetMaxKvCount() int32 {
	return p.MaxKvCount
}

func (p *MultiGetRequest) GetMaxKvSize() int32 {
	return p.MaxKvSize
}

func (p *MultiGetRequest) GetNoValue() bool {
	return p.NoValue
}
func (p *MultiGetRequest) IsSetHashKey() bool {
	return p.HashKey != nil
}

func (p *MultiGetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MultiGetRequest) readField1(iprot thrift.TProtocol) error {
	p.HashKey = &base.Blob{}
	if err := p.HashKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HashKey), err)
	}
	return nil
}

func (p *MultiGetRequest) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*base.Blob, 0, size)
	p.SorkKeys = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &base.Blob{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.SorkKeys = append(p.SorkKeys, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiGetRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxKvCount = v
	}
	return nil
}

func (p *MultiGetRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxKvSize = v
	}
	return nil
}

func (p *MultiGetRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NoValue = v
	}
	return nil
}

func (p *MultiGetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multi_get_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiGetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hash_key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash_key: ", p), err)
	}
	if err := p.HashKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HashKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash_key: ", p), err)
	}
	return err
}

func (p *MultiGetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sork_keys", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sork_keys: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SorkKeys)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SorkKeys {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sork_keys: ", p), err)
	}
	return err
}

func (p *MultiGetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_kv_count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:max_kv_count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxKvCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_kv_count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:max_kv_count: ", p), err)
	}
	return err
}

func (p *MultiGetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("max_kv_size", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:max_kv_size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxKvSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.max_kv_size (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:max_kv_size: ", p), err)
	}
	return err
}

func (p *MultiGetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("no_value", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:no_value: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NoValue)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.no_value (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:no_value: ", p), err)
	}
	return err
}

func (p *MultiGetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiGetRequest(%+v)", *p)
}

// Attributes:
//  - Error
//  - Kvs
//  - AppID
//  - PartitionIndex
//  - Server
type MultiGetResponse struct {
	Error          int32       `thrift:"error,1" json:"error"`
	Kvs            []*KeyValue `thrift:"kvs,2" json:"kvs"`
	AppID          int32       `thrift:"app_id,3" json:"app_id"`
	PartitionIndex int32       `thrift:"partition_index,4" json:"partition_index"`
	// unused field # 5
	Server string `thrift:"server,6" json:"server"`
}

func NewMultiGetResponse() *MultiGetResponse {
	return &MultiGetResponse{}
}

func (p *MultiGetResponse) GetError() int32 {
	return p.Error
}

func (p *MultiGetResponse) GetKvs() []*KeyValue {
	return p.Kvs
}

func (p *MultiGetResponse) GetAppID() int32 {
	return p.AppID
}

func (p *MultiGetResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *MultiGetResponse) GetServer() string {
	return p.Server
}
func (p *MultiGetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MultiGetResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *MultiGetResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.Kvs = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &KeyValue{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Kvs = append(p.Kvs, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MultiGetResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *MultiGetResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *MultiGetResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *MultiGetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("multi_get_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MultiGetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *MultiGetResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kvs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Kvs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Kvs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err)
	}
	return err
}

func (p *MultiGetResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:app_id: ", p), err)
	}
	return err
}

func (p *MultiGetResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:partition_index: ", p), err)
	}
	return err
}

func (p *MultiGetResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *MultiGetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiGetResponse(%+v)", *p)
}

// Attributes:
//  - StartKey
//  - StopKey
//  - StartInclusive
//  - StopInclusive
//  - BatchSize
type GetScannerRequest struct {
	StartKey       *base.Blob `thrift:"start_key,1" json:"start_key"`
	StopKey        *base.Blob `thrift:"stop_key,2" json:"stop_key"`
	StartInclusive bool       `thrift:"start_inclusive,3" json:"start_inclusive"`
	StopInclusive  bool       `thrift:"stop_inclusive,4" json:"stop_inclusive"`
	BatchSize      int32      `thrift:"batch_size,5" json:"batch_size"`
}

func NewGetScannerRequest() *GetScannerRequest {
	return &GetScannerRequest{}
}

var GetScannerRequest_StartKey_DEFAULT *base.Blob

func (p *GetScannerRequest) GetStartKey() *base.Blob {
	if !p.IsSetStartKey() {
		return GetScannerRequest_StartKey_DEFAULT
	}
	return p.StartKey
}

var GetScannerRequest_StopKey_DEFAULT *base.Blob

func (p *GetScannerRequest) GetStopKey() *base.Blob {
	if !p.IsSetStopKey() {
		return GetScannerRequest_StopKey_DEFAULT
	}
	return p.StopKey
}

func (p *GetScannerRequest) GetStartInclusive() bool {
	return p.StartInclusive
}

func (p *GetScannerRequest) GetStopInclusive() bool {
	return p.StopInclusive
}

func (p *GetScannerRequest) GetBatchSize() int32 {
	return p.BatchSize
}
func (p *GetScannerRequest) IsSetStartKey() bool {
	return p.StartKey != nil
}

func (p *GetScannerRequest) IsSetStopKey() bool {
	return p.StopKey != nil
}

func (p *GetScannerRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetScannerRequest) readField1(iprot thrift.TProtocol) error {
	p.StartKey = &base.Blob{}
	if err := p.StartKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartKey), err)
	}
	return nil
}

func (p *GetScannerRequest) readField2(iprot thrift.TProtocol) error {
	p.StopKey = &base.Blob{}
	if err := p.StopKey.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StopKey), err)
	}
	return nil
}

func (p *GetScannerRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartInclusive = v
	}
	return nil
}

func (p *GetScannerRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StopInclusive = v
	}
	return nil
}

func (p *GetScannerRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BatchSize = v
	}
	return nil
}

func (p *GetScannerRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_scanner_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetScannerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_key: ", p), err)
	}
	if err := p.StartKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_key: ", p), err)
	}
	return err
}

func (p *GetScannerRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stop_key", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stop_key: ", p), err)
	}
	if err := p.StopKey.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StopKey), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stop_key: ", p), err)
	}
	return err
}

func (p *GetScannerRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_inclusive", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_inclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StartInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_inclusive (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_inclusive: ", p), err)
	}
	return err
}

func (p *GetScannerRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stop_inclusive", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stop_inclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StopInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stop_inclusive (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stop_inclusive: ", p), err)
	}
	return err
}

func (p *GetScannerRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("batch_size", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:batch_size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BatchSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.batch_size (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:batch_size: ", p), err)
	}
	return err
}

func (p *GetScannerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetScannerRequest(%+v)", *p)
}

// Attributes:
//  - ContextID
type ScanRequest struct {
	ContextID int64 `thrift:"context_id,1" json:"context_id"`
}

func NewScanRequest() *ScanRequest {
	return &ScanRequest{}
}

func (p *ScanRequest) GetContextID() int64 {
	return p.ContextID
}
func (p *ScanRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ContextID = v
	}
	return nil
}

func (p *ScanRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scan_request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context_id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ContextID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.context_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context_id: ", p), err)
	}
	return err
}

func (p *ScanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanRequest(%+v)", *p)
}

// Attributes:
//  - Error
//  - Kvs
//  - ContextID
//  - AppID
//  - PartitionIndex
//  - Server
type ScanResponse struct {
	Error          int32       `thrift:"error,1" json:"error"`
	Kvs            []*KeyValue `thrift:"kvs,2" json:"kvs"`
	ContextID      int64       `thrift:"context_id,3" json:"context_id"`
	AppID          int32       `thrift:"app_id,4" json:"app_id"`
	PartitionIndex int32       `thrift:"partition_index,5" json:"partition_index"`
	Server         string      `thrift:"server,6" json:"server"`
}

func NewScanResponse() *ScanResponse {
	return &ScanResponse{}
}

func (p *ScanResponse) GetError() int32 {
	return p.Error
}

func (p *ScanResponse) GetKvs() []*KeyValue {
	return p.Kvs
}

func (p *ScanResponse) GetContextID() int64 {
	return p.ContextID
}

func (p *ScanResponse) GetAppID() int32 {
	return p.AppID
}

func (p *ScanResponse) GetPartitionIndex() int32 {
	return p.PartitionIndex
}

func (p *ScanResponse) GetServer() string {
	return p.Server
}
func (p *ScanResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *ScanResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.Kvs = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &KeyValue{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Kvs = append(p.Kvs, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ScanResponse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ContextID = v
	}
	return nil
}

func (p *ScanResponse) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppID = v
	}
	return nil
}

func (p *ScanResponse) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PartitionIndex = v
	}
	return nil
}

func (p *ScanResponse) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Server = v
	}
	return nil
}

func (p *ScanResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scan_response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *ScanResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kvs", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kvs: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Kvs)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Kvs {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kvs: ", p), err)
	}
	return err
}

func (p *ScanResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context_id", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:context_id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ContextID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.context_id (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:context_id: ", p), err)
	}
	return err
}

func (p *ScanResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("app_id", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:app_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.app_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:app_id: ", p), err)
	}
	return err
}

func (p *ScanResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("partition_index", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partition_index: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PartitionIndex)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.partition_index (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partition_index: ", p), err)
	}
	return err
}

func (p *ScanResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("server", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server: ", p), err)
	}
	if err := oprot.WriteString(string(p.Server)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.server (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server: ", p), err)
	}
	return err
}

func (p *ScanResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanResponse(%+v)", *p)
}
